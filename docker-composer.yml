import time
import random
import json
from datetime import datetime
from kafka import KafkaProducer

# --- Kafka configuration ---
KAFKA_BROKER = "localhost:9092"
KAFKA_TOPIC = "purchase_events"

def generate_random_data():
    """Generates a single row of randomized purchase data."""
    names = ["Alice", "Bob", "Charlie", "Diana", "Eve", "Frank"]
    genders = ["Male", "Female", "Non-binary"]
    locations = ["New York", "London", "Paris", "Tokyo", "Berlin"]
    return {
        "name": random.choice(names),
        "gender": random.choice(genders),
        "location": random.choice(locations),
        "purchase_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "price": round(random.uniform(10.00, 1000.00), 2)
    }

def run_producer(messages_per_second):
    """Runs the Kafka producer at the specified rate."""
    print("Initializing Kafka Producer...")
    producer = None
    try:
        producer = KafkaProducer(
            bootstrap_servers=[KAFKA_BROKER],
            value_serializer=lambda v: json.dumps(v).encode('utf-8'),
            key_serializer=lambda k: str(k).encode('utf-8'),
            acks='all',
            retries=5
        )
        print(f"Producer connected to {KAFKA_BROKER}. Sending data to topic: {KAFKA_TOPIC}")
        print("-" * 30)

        while True:
            data_row = generate_random_data()
            producer.send(
                topic=KAFKA_TOPIC,
                value=data_row,
                key=data_row["location"]
            )
            print(f"Produced: {data_row}")
            time.sleep(1 / messages_per_second)

    except KeyboardInterrupt:
        print("\n--- Data generation stopped. ---")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
    finally:
        if producer:
            print("Flushing outstanding messages...")
            producer.flush()
            producer.close()
            print("Producer shut down.")

if __name__ == "__main__":
    while True:
        try:
            mps_input = input("Enter the desired messages per second (e.g., 5): ")
            mps = int(mps_input)
            if mps > 0:
                break
            else:
                print("Please enter a positive number.")
        except ValueError:
            print("Invalid input. Please enter a whole number.")
    
    run_producer(mps)
